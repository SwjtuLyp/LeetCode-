//这道题写得太过于繁琐了，虽然我这样写别人很容易弄懂，但是有很多地方都可以进行优化。
vector<int> searchRange(vector<int>& nums, int target) {
        //二分查找；
        int i=0,j=nums.size();
        vector<int>s;
        vector<int>m;
        while(i<j)
        {
            if(nums[i]==target)
            {
                int n=0;
                while(i-n>=0)
                {
                    if(nums[i-n]==target)
                    {
                        s.push_back(i-n);
                        n++;
                    }
                    else
                        break;
                }
                n=1;
                while(i+n<nums.size())
                {
                    if(nums[i+n]==target)
                    {
                        s.push_back(i+n);
                        n++;
                    }
                    else
                        break;
                }
                if(s.size()==1)
                    s.push_back(s[0]);
                sort(s.begin(),s.end());
                m.push_back(s[0]);
                m.push_back(s[s.size()-1]);
                return m;
            }
            if(nums[j]==target&&j<nums.size())
            {
                int n=0;
                while(j-n>=0)
                {
                    if(nums[j-n]==target)
                    {
                        s.push_back(j-n);
                        n++;   
                    }
                    else
                        break;
                }
                n=1;
                while(j+n<nums.size())
                {
                    if(nums[j+n]==target)
                    {
                        s.push_back(j+n);
                        n++;
                    }
                    else
                        break;
                }
                if(s.size()==1)
                    s.push_back(s[0]);
                sort(s.begin(),s.end());
                m.push_back(s[0]);
                m.push_back(s[s.size()-1]);
                return m; 
            }
            if(nums[(i+j)/2]>target)
                j=(i+j)/2;
            else
            {
                if(nums[(i+j)/2]<target)
                    i=(i+j)/2+1;
                else
                {
                    int n=0;
                    int l=(i+j)/2;
                    while(l-n>=0)
                    {
                        if(nums[l-n]==target)
                        {
                            s.push_back(l-n);
                            n++;   
                        }
                        else
                            break;
                    }
                    n=1;
                    while(l+n<nums.size())
                    {
                        if(nums[l+n]==target)
                        {
                            s.push_back(l+n);
                            n++;
                        }
                        else
                            break;
                    }
                    if(s.size()==1)
                        s.push_back(s[0]);
                    sort(s.begin(),s.end());
                    m.push_back(s[0]);
                    m.push_back(s[s.size()-1]);
                    return m; 
                }
            }
        }
        s.push_back(-1);
        s.push_back(-1);
        return s;
    }