vector<string>ans;
    string str;
    void dfs(string digits,string res,int k){
        if(k==digits.size()){
            ans.push_back(res);
            return;
        }
        if(digits[k]=='2'){
            for(int i=0;i<3;i++){
                res+='a'+i;
                dfs(digits,res,k+1);
                res.pop_back();
            }
            return;
        }
        if(digits[k]=='3'){
            for(int i=0;i<3;i++){
                res+='d'+i;
                dfs(digits,res,k+1);
                res.pop_back();
            }
            return;
        }
        if(digits[k]=='4'){
            for(int i=0;i<3;i++){
                res+='g'+i;
                dfs(digits,res,k+1);
                res.pop_back();
            }
            return;
        }
        if(digits[k]=='5'){
            for(int i=0;i<3;i++){
                res+='j'+i;
                dfs(digits,res,k+1);
                res.pop_back();
            }
            return;
        }
        if(digits[k]=='6'){
            for(int i=0;i<3;i++){
                res+='m'+i;
                dfs(digits,res,k+1);
                res.pop_back();
            }
            return;
        }
        if(digits[k]=='7'){
            for(int i=0;i<4;i++){
                res+='p'+i;
                dfs(digits,res,k+1);
                res.pop_back();
            }
            return;
        }
        if(digits[k]=='8'){
            for(int i=0;i<3;i++){
                res+='t'+i;
                dfs(digits,res,k+1);
                res.pop_back();
            }
            return ;
        }
        if(digits[k]=='9'){
            for(int i=0;i<4;i++){
                res+='w'+i;
                dfs(digits,res,k+1);
                res.pop_back();
            }
            return;
        }
    }
    vector<string> letterCombinations(string digits) {
        if(digits.size()==0)
            return ans;
        dfs(digits,str,0);
        return ans;
    }